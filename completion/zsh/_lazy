# bin/lazy zsh completion script generated by CLIFramework
# Web: http://github.com/c9s/php-CLIFramework
# THIS IS AN AUTO-GENERATED FILE, PLEASE DON'T MODIFY THIS FILE DIRECTLY.
___bin_lazy_meta () {
  local curcontext=$curcontext state line ret=1
  typeset -A opt_args
  typeset -A val_args
  declare -a lines
  declare -a args
  local ret=1
  local desc=$1
  local cmdsig=$2
  local valtype=$3
  local pos=$4
  local completion=$5
  output=$(bin/lazy _meta --zsh $cmdsig $valtype $pos $completion)
  lines=("${(@f)output}")
  output_type=${lines[1]}
  if [[ $lines[1] == "#groups" ]] ; then
      eval $output
      for tag in ${(k)groups} ; do
          complete_values=(${(z)${groups[$tag]}})
          label=${labels[$tag]}
          if [[ -z $label ]] ; then
              label=$tag
          fi
          _describe -t $tag $label complete_values && ret=0
      done
  elif [[ $lines[1] == "#values" ]] ; then
      args=(${lines:1})
     _values "$desc" ${=args} && ret=0
  elif [[ $lines[1] == "#descriptions" ]] ; then
      args=(${lines:1})
      _describe "$desc" args && ret=0
  else
     _values "$desc" ${=lines} && ret=0
  fi
  return ret
}
_bin_lazy() {
local curcontext=$curcontext state line
typeset -A opt_args
local ret=1
  _arguments -C \
    '(-v --verbose)'{-v,--verbose}'[Print verbose message.]' \
    '(-d --debug)'{-d,--debug}'[Print debug message.]' \
    '(-q --quiet)'{-q,--quiet}'[Be quiet.]' \
    '(-h --help)'{-h,--help}'[help]' \
    '--version[show version]' \
    ': :->cmds' \
    '*:: :->option-or-argument' \
     && return
  case $state in
    (cmds)
  local commands; commands=(
    help:'Show help message of a command'
    init:'initialize your lazyrecord structures.'
    build-conf:'build configuration file.'
    conf:'build configuration file.'
    schema:'schema command.'
    list-schema:'list schema files.'
    build-schema:'build schema files.'
    clean-schema:'clean up schema files.'
    build-basedata:'insert basedata into datasource.'
    sql:'build sql and insert into database.'
    diff:'diff database schema.'
    migrate:'migrate database schema.'
    prepare:'prepare schema and database.'
    meta:'set, get or list meta.'
    version:'Show database version'
    create-db:'create database from config'
  )
  _describe -t commands 'command' commands && ret=0
    ;;
    (option-or-argument)
      curcontext=${curcontext%:*}-$line[1]:
      case $line[1] in
        (help)
        
        ;;
        (init)
        
        ;;
        (build-conf)
            _arguments -w -S -s \
              ':file:_files -g "*.yml"' \
               && ret=0
        
        ;;
        (conf)
            _arguments -w -S -s \
              ':file:_files -g "*.yml"' \
               && ret=0
        
        ;;
        (schema)
            _arguments -C \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              build:'build schema files.'
              sql:'build sql and insert into database.'
              list:'list schema files.'
              clean:'clean up schema files.'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (build)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force generate all schema files.]' \
                          ':file:_files' \
                           && ret=0
                  
                  ;;
                  (sql)
                        _arguments -w -S -s \
                          '(-r --rebuild)'{-r,--rebuild}'[rebuild SQL schema.]' \
                          '(-c --clean)'{-c,--clean}'[clean up SQL schema.]' \
                          '(-f --file)'{-f,--file=}'[write schema sql to file]' \
                          '(-b --basedata)'{-b,--basedata}'[insert basedata]' \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
                           && ret=0
                  
                  ;;
                  (list)
                  
                  ;;
                  (clean)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force generate all schema files.]' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (list-schema)
        
        ;;
        (build-schema)
            _arguments -w -S -s \
              '(-f --force)'{-f,--force}'[force generate all schema files.]' \
              ':file:_files' \
               && ret=0
        
        ;;
        (clean-schema)
            _arguments -w -S -s \
              '(-f --force)'{-f,--force}'[force generate all schema files.]' \
               && ret=0
        
        ;;
        (build-basedata)
        
        ;;
        (sql)
            _arguments -w -S -s \
              '(-r --rebuild)'{-r,--rebuild}'[rebuild SQL schema.]' \
              '(-c --clean)'{-c,--clean}'[clean up SQL schema.]' \
              '(-f --file)'{-f,--file=}'[write schema sql to file]' \
              '(-b --basedata)'{-b,--basedata}'[insert basedata]' \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
               && ret=0
        
        ;;
        (diff)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
               && ret=0
        
        ;;
        (migrate)
            _arguments -w -S -s \
              '--new=[create new migration script.]' \
              '--diff=[use schema diff to generate script automatically.]' \
              '--status[show current migration status.]' \
              '(-u --up)'{-u,--up}'[run upgrade migration scripts.]' \
              '(-d --down)'{-d,--down}'[run downgrade migration scripts.]' \
              '(-U --upgrade-diff)'{-U,--upgrade-diff}'[run upgrade from schema diff]' \
              '(-D --data-source)'{-D,--data-source=}'[data source id.]' \
               && ret=0
        
        ;;
        (prepare)
            _arguments -C \
              '(-f --force)'{-f,--force}'[force generate all schema files.]' \
              '(-r --rebuild)'{-r,--rebuild}'[rebuild SQL schema.]' \
              '(-c --clean)'{-c,--clean}'[clean up SQL schema.]' \
              '(-f --file)'{-f,--file=}'[write schema sql to file]' \
              '(-b --basedata)'{-b,--basedata}'[insert basedata]' \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              0:'build schema files.'
              1:'build sql and insert into database.'
              2:'insert basedata into datasource.'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (0)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force generate all schema files.]' \
                          ':file:_files' \
                           && ret=0
                  
                  ;;
                  (1)
                        _arguments -w -S -s \
                          '(-r --rebuild)'{-r,--rebuild}'[rebuild SQL schema.]' \
                          '(-c --clean)'{-c,--clean}'[clean up SQL schema.]' \
                          '(-f --file)'{-f,--file=}'[write schema sql to file]' \
                          '(-b --basedata)'{-b,--basedata}'[insert basedata]' \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
                           && ret=0
                  
                  ;;
                  (2)
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (meta)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_lazy_meta "" meta opt data-source valid-values}' \
               && ret=0
        
        ;;
        (version)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
               && ret=0
        
        ;;
        (create-db)
            _arguments -w -S -s \
              ':dataSource' \
               && ret=0
        
        ;;
      esac
      ;;
    esac

return ret
}
compdef _bin_lazy lazy
